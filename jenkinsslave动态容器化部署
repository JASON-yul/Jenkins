https://blog.51cto.com/jacksoner/2340516
参考https://cloud.tencent.com/developer/article/1644689
https://www.qikqiak.com/k8s-book/docs/36.Jenkins%20Slave.html
deployment详解见：https://my.oschina.net/gibsonxue/blog/1840887

一、静态容器配置
vim deploy.yaml文件

apiVersion: apps/v1                  #接口版本
kind: Deployment                     #接口类型
metadata:
  labels:                           #标签
    app: testsucc0178
  name: testsucc0178                #Deployment名称
  namespace: testsucc               #命名空间
spec:
  replicas: 3                       # Replicas允许创建的 Pod 数量
  selector:
    matchLabels:                     #对应上面标签
      app: testsucc0178
  strategy:
    rollingUpdate:                   #由于replicas为3,则整个升级,pod个数在2-4个之间
      maxSurge: 25%                  #滚动升级时会先启动pod数
      maxUnavailable: 25%            #滚动升级时允许的最大Unavailable的pod个数
    type: RollingUpdate               #RollingUpdate 策略会调用 rolloutRolling 方法，根据 maxSurge 和 maxUnavailable 配置对 Pod 进行滚动更新
  template:
    metadata:
      labels:
        app: testsucc0178           #模板名称
    spec:                           #定义容器模板，该模板可以包含多个容器
      containers:
      - env:                        ##通过环境变量的方式，直接传递pod=自定义Linux OS环境变量
        - name: jenkinsURL
          value: "https://testsucc.com"
        - name: Node
          value: "testsucc0178"
        - name: workDir
          value: "/root/jenkins"
        image: harbor/testsucce/testsucc-jenkins:base     #镜像地址
        imagePullPolicy: Always                           #如果不存在则拉取IfNotPresent
        name: jnlp
        resources:                                    #CPU内存限制
          requests:
            cpu: 2
            memory: 8Gi
        limits:
            cpu: 2
            memory: 8Gi
        securityContext:                              #安全上下文（Security Context）定义Pod 或Container 的特权与访问控制设置
          privileged: true                           #启动权限
        terminationMessagePath: /dev/termination-log    #Kubernetes 从容器的 terminationMessagePath 字段中指定的终止消息文件中检索终止消息
        terminationMessagePolicy: File                 #仅从终止消息文件中检索终止消息
        volumeMounts:                                #容器内挂载volumes中定义的磁盘
        - mountPath: /root/jenkins                   ##普通用法，该卷跟随容器销毁，挂载一个目录
          name: workspace
        - mountPath: /root/testsuccecheck
          name: testsucc
        - mountPath: /root/tools
          name: tools
      dnsPolicy: ClusterFirst              #与配置的集群域后缀不匹配的任何 DNS 查询都将转发到从节点继承的上游名称服务器。集群管理员可能配置了额外的存根域和上游 DNS 服务器
      imagePullSecrets:   #提供密钥的Pod才能访问镜像仓库（kubectl create secret docker-registry hissecret --docker-server=仓库名 --docker-username=用户 --docker-password=密码）
      - name: hissecret
      nodeSelector:                  #使 pod 可以在某个节点上运行，该节点的标签中 必须包含这里的每个键值对
        testsucctestsucc: "true"     #kubectl label node 192.168.1.123 testsucctestsucc=true 创建node标签
      restartPolicy: Always          #规约中指定截止时间参数，等于 Always 才是被允许的，这也是在没有指定时的默认设置
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30   #回调参数，系统回调超过30秒，pod会被杀死
      volumes:                           # node机器上定义磁盘给上面volumeMounts挂载
      - hostPath:                       #挂载宿主机上面的目录
          path: /data/testsucc   
          type: ""
        name: workspace
      - name: testsucc                      #供挂载NFS存储类型
        nfs:
          path: /testsucc/version
          server: 192.168.190.6                #NFS服务器地址
      - name: tools
        nfs:
          path: /testsucc/tools
          server: 192.168.190.6


二、动态容器
1.“系统管理” —> “管理插件” —> “可选插件” —> “Kubernetes plugin” 勾选安装即可
2.然后点击 “系统管理” —> “系统设置” —> “Add a new cloud” —> 选择 “Kubernetes”，填写Kubernetes和Jenkins配置信息。
3.配置：
名称：自定义
Kubernetes 地址：需要托管的k8s集群master的apiserver地址
Kubernetes 服务证书 key： k8s集群master的apiserver的根证书ca证书，cat /etc/kubernetes/pki/ca.crt
Kubernetes 命名空间：需要再k8s集群中定义
凭据：openssl pkcs12 -export -out cert.pfx -inkey apiserver-kubelet-client.key -in apiserver-kubelet-client.crt -certfile ca.crt 创建的cert.pfx上传到凭据里，需要配置密码，测试连接是否成功
Jenkins 地址：jenkins的url（http://libingtestone.yl.com/或http://192.168.5.25/）
容器数量：启动容器的总共数量，不能超过总并发数

Pod Templates：
     名称：自定义
     命名空间：同上k8s内创建的命名空间
     标签列表：调用jenkins-slave的标签
     用法：Only build jobs with label expressions matching this node
     容器列表
         名称：jnlp
         Docker 镜像：docker启动镜像
         总是拉取镜像：不勾选
         工作目录：镜像初始路径（/home）
         工作目运行的命令录：/mnt/data_disk/jenkins/jenkins-agent
         命令参数：可不填
         以最高权限运行：确定docker启动权限，下面userid，groupid可根据需要配置
         CPU 需求：对应yaml的request cpu
         内存需求：对应yaml的request memory
     环境变量：
         主机路径：挂载到node节点的路径
         挂载路径：pod容器路径
    		
 	拉取镜像的 Secret
        名称：hissecret（拉取镜像需要的秘钥，镜像仓库配置权限）
         kubectl create secret docker-registry hissecret --docker-server=仓库名 --docker-username=user --docker-password=密码 --namespace=命名空间
  节点选择器：指定node节点配置的标签label
   
   
注： 以上动态容器配置，可参考静态容器配置
     
获取agent.jar地址:https://repo.jenkins-ci.org/webapp/#/artifacts/browse/tree/General/releases/org/jenkins-ci/main/maven-agent

vim jenkins-agent
#!/bin/bash
#env | grep "JENKINS" >>env.txt
source /etc/profile
git config --global http.sslVerify false
echo "[DEBUG] ----nohup java -jar /usr/share/jenkins/agent.jar -jnlpUrl ${JENKINS_URL}/computer/${JENKINS_AGENT_NAME}/slave-agent.jnlp -secret ${JENKINS_SECRET} -workDir ${HOME} >slave.log & -----"
java -jar /mnt/jenkins/agent.jar -jnlpUrl ${JENKINS_URL}/computer/${JENKINS_AGENT_NAME}/slave-agent.jnlp -secret ${JENKINS_SECRET} -workDir ${HOME}

